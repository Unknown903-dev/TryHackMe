Advanced scan

--------------------------------------------------------------
Null scan	= -sN

- does not set any flags, bits are set to zero
- not trigger reponse when reach open port

nmap -sN Target
- comp1 Null(no flag) to comp2
case: TCP port is open

- if port closed the target should respond RST
- the lack of RST response can help find the ports that are not closed: open or filtered

nmap -sN Target
- comp1 Null (no  flag) to comp2
- comp2 RST ACK to comp1 
case: TCP port is closed

- null scan relies on lack of response to show port is not closed, cannot indicate for sure that the ports are opened 
  can show no response due to firewall
------------------------------------------------------------
Fin Scan    =   -sF

- it sends a tcp packet with the Fin flag
- no response will be sent if tcp port is open 
- Nmap cannot be sure if the port is open or if a firewall is blocking the traffic related to this TCP port

nmap -sF target
- comp1 Fin to comp2
case: TCP port is open

- should respond with an RST if the port is closed 
- some firewalls will silently drop traffic without sending an RST

nmap -sF target 
- comp1 FIN to comp2 
- comp2 RST ACK to comp1
case : TCP port is closed
--------------------------------------------------------
Xmas Scan   = -sX

- the scan sets the FIN, PSH, URG flags 
- Null scan and FIN scan, if an RST packet is received, it means that the port is closed. Otherwise, it will be reported as open|filtered.

nmap -sX target
- comp1 Fin PSh URG to comp2 
case: tcp port is open 

nmap -sX target
- comp1 Fin, PSH URG to comp2
- comp2 RST ACK to comp1 
case : TCP port is closed
------------------------------------------------------------

- three scan types can be efficient is when scanning a target behind a stateless (non-stateful) firewall
- A stateless firewall will check if the incoming packet has the SYN flag set to detect a connection attempt. 
  Using a flag combination that does not match the SYN packet makes it possible to deceive the firewall and reach the system behind it.
- a stateful firewall will practically block all such crafted packets and render this kind of scan useless

null scan = 0 flags
Fin scan = 1 flag
xmas scan = 3 flags
-----------------------------------------------------------
TCP Maimon Scan    = -sM

- the Fin and Ack bits are a set 
- target send RST packet as response
- certain BSD-derived systems drop the packet if it is an open port exposing the open ports
- wont work in most moder networks

- most targets respond with RST packet even if tcp port open, we cant discover open ports this way

nmap -sM target
- comp1 Fin/Ack to comp2 
- comp2 RST to comp1 
case: TCP port is open or closed, certain systems drop packet if port open

when running command
-  because open ports and closed ports are behaving the same way, the Maimon scan could not discover any open ports on the target system.
-------------------------------------------
TCP ACK scan	= -sA

- ACK scan will send a TCP packet with the ACK flag set
- the target would respond to the ACK with RST regardless of the state of the port
- happen because TCP packet with the ACK flag set should be sent only in response to a received TCP packet to acknowledge the receipt of some data
- in this case the scan wont tell us if target port is open in a simple setup

nmap -sA target
- comp1 ACK to comp2 
- comp2 RST to comp1 
case: Tcp port is open or closed

- this scan can be helpful if there was a firewall in front of target
  more suitable to discover firewall rule sets and configuration
  show the ports that are not blocked by firewall
#############################################

Window Scan 	= -sW

- similar to ack scan, it examines the tcp window field of the RST packets returned 
   which can show the port is open 
- we expect to get an RST packet in reply to our “uninvited” ACK packets, regardless of whether the port is open or closed

nmap -sW target
- comp1 ACK to comp2
- comp2 RST to comp1
case: Tcp port is open or closed

- if no firewall scan is useless
-------------------------------------------------
Custom scan   = --scanflags

-     --scanflags RSTSYNFIN  = if want to run SYN,RST, FIN simultaneously

nmap --scanflags flaG_type target
- comp1 custom flag set to comp2 
- comp2 to ? comp1
case: choose which flag set --scanflags URGACKPSHRSTSYNFIN sets all flags
--------------------------------------

ACK scan and the window scan were very efficient at helping us map out the firewall rules. 
However, it is vital to remember that just because a firewall is not blocking a specific port, it does not necessarily mean that a service is listening on that port. 
For example, there is a possibility that the firewall rules need to be updated to reflect recent service changes. 
Hence, ACK and window scans are exposing the firewall rules, not the services.

--------------------------------------------------

spoofing and decoy

- scan is beneficial where you can guarentee to capture the response 
- If you try to scan a target from some random network using a spoofed IP address, chances are you won’t have any response routed to you, and the scan results could be unreliable

nmap -S SPOOFED_IP MACHINE_IP

- Nmap will craft all the packets using the provided spoof address
- target will respond to the incoming packets sending the replies to the destination spoof address
- attacker needs to monitor the network traffic to analyze the replies.


- attack ip  -> source from spoof ip -> machine ip
- machine ip -> destination to spoof ip -> spoof ip
using spoof ip as the source ip address for the scan 
-----------------------------------------------------------------------

scan with a spoof ip address is 3 steps just like above
- Attacker sends a packet with a spoofed source IP address to the target machine.
- Target machine replies to the spoofed IP address as the destination.
- Attacker captures the replies to figure out open ports.
---------------------------------
-   specify the network interface using -e and to explicitly disable ping scan -Pn
-    nmap -e NET_INTERFACE -Pn -S SPOOFED_IP MACHINE_IP to tell Nmap explicitly which network interface to use and not to expect to receive a ping reply
-  scan will be useless if the attacker system cannot monitor the network for responses

- when on same subet as target can spoof mac address
 specify the source MAC address using --spoof-mac SPOOFED_MAC
  same ethernet 802.3 / wifi 802.11

nmap -e NET_INTERFACE -Pn -S SPOOFED_IP MACHINE_IP
- attacker ip -> source: decoy1 -> machine ip
-  		 source attacker ip
- 		 source decoy2 
- machine ip to attacker ip
-  	     to decoy1
- 	     to decoy 2
using the decoys and attacker ip addresses for the scan
------------------------------------
ex: decoy scan = nmap -D 10.10.0.1,10.10.0.2,ME MACHINE_IP

- ME to indicate that your IP address should appear in the third order.
- nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME MACHINE_I
- where the third and fourth source IP addresses are assigned randomly, while the fifth source is going to be the attacker’s IP address. 
- In other words, each time you execute the latter command, you would expect two new random IP addresses to be the third and fourth decoy sources.
#############################################################
firewall = blocks packets to pass through or blocks them 
	    A traditional firewall inspects, at least, the IP header and the transport layer header. 
	    A more sophisticated firewall would also try to examine the data carried by the transport layer.

IDS = Intrusion detection system = inspects network packets for select behavioural patterns or specific content signatures
	- raises an elert when malicious rule is met
	- ids would inspect data content in transport layeyr and check if matches any malicious pattern
	- can make it less likely for traditional firewall/ids to detect nmap activity, depends on type of firewall/IDS, you might benefit from dividing the packet into smaller packets

Fragmented packets = -f = ip data is divided in 8bytes or less
	- adding another -f = will split the data into 16 bytes fragments
	- change default value = --mtu  = should always choose a muiltiple of 8

sudo nmap -sS -p80 -f ip_address      =   we are requesting Nmap to fragment the IP packets, and use stealth tcp SYN scan on port 80

- min size of tcp header 20 bytes

- -f, the 24 bytes of the TCP header will be divided into multiples of 8 bytes
  24 is divisible by 8, we get 3 ip fragments  
  each has 20 bytes of IP header and 8 bytes of TCP header

--data-length NUM   = prefer to increase the size of your packets to make them look innocuous
		num = bytes, want to append to your  packet
----------------------------------------

- The idle scan, or zombie scan, requires an idle system connected to the network that you can communicate with
-  Practically, Nmap will make each probe appear as if coming from the idle (zombie) host, then it will check for indicators whether the idle (zombie) host received any response to the spoofed probe.
- we need to check ip id value in ip header
- can run an idle scan using nmap -sI ZOMBIE_IP MACHINE_IP, where ZOMBIE_IP is the IP address of the idle host (zombie).


The idle (zombie) scan requires 

three steps to discover whether a port is open:

- Trigger the idle host to respond so that you can record the current IP ID on the idle host.
- Send a SYN packet to a TCP port on the target. The packet should be spoofed to appear as if it was coming from the idle host (zombie) IP address.
- Trigger the idle machine again to respond so that you can compare the new IP ID with the one received earlier.


EX: we have the attacker system probing an idle machine, a multi-function printer. By sending a SYN/ACK, it responds with an RST packet containing its newly incremented IP ID.
--------------------------------------------------------------
The attacker will send a SYN packet to the TCP port they want to check on the target machine in the next step. However, this packet will use the idle host (zombie) IP address as the source. Three scenarios would arise. 
In the first scenario, shown in the figure below, the TCP port is closed; therefore, the target machine responds to the idle host with an RST packet. The idle host does not respond; hence its IP ID is not incremented

In the second scenario, as shown below, the TCP port is open, so the target machine responds with a SYN/ACK to the idle host (zombie). The idle host responds to this unexpected packet with an RST packet, thus incrementing its IP ID.

In the third scenario, the target machine does not respond at all due to firewall rules. This lack of response will lead to the same result as with the closed port; the idle host won’t increase the IP ID.

For the final step, the attacker sends another SYN/ACK to the idle host. The idle host responds with an RST packet, incrementing the IP ID by one again. The attacker needs to compare the IP ID of the RST packet received in the first step 
with the IP ID of the RST packet received in this third step. If the difference is 1, it means the port on the target machine was closed or filtered. However, if the difference is 2, it means that the port on the target was open.

It is worth repeating that this scan is called an idle scan because choosing an idle host is indispensable for the accuracy of the scan. If the “idle host” is busy, all the returned IP IDs would be useless.
-----------------------------------------------

--reason = for more details when using scans
-v or -vv = for more details (verbosity)
-d or -dd = for debugging details
-------------------------------------------------
scans
These scan types rely on setting TCP flags in unexpected ways to prompt ports for a reply. Null, FIN, and Xmas scan provoke a response from closed ports, while Maimon, ACK, and Window scans provoke a response from open and closed ports.

TCP Null Scan			sudo nmap -sN MACHINE_IP
TCP FIN Scan			sudo nmap -sF MACHINE_IP
TCP Xmas Scan			sudo nmap -sX MACHINE_IP
TCP Maimon Scan			sudo nmap -sM MACHINE_IP
TCP ACK Scan			sudo nmap -sA MACHINE_IP
TCP Window Scan			sudo nmap -sW MACHINE_IP
Custom TCP Scan			sudo nmap --scanflags URGACKPSHRSTSYNFIN MACHINE_IP
Spoofed Source IP		sudo nmap -S SPOOFED_IP MACHINE_IP
Spoofed MAC Address		--spoof-mac SPOOFED_MAC
Decoy Scan			nmap -D DECOY_IP,ME MACHINE_IP
Idle (Zombie) Scan		sudo nmap -sI ZOMBIE_IP MACHINE_IP
Fragment IP data into 8 bytes	-f
Fragment IP data into 16 bytes	-ff
------------------------------------------------------
--source-port PORT_NUM		specify source port number
--data-length NUM		append random data to reach given length
--------------------------------------------------------















